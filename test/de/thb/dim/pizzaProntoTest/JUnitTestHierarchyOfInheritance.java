package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import java.awt.Color;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.ChefVO;import de.thb.dim.pizzaPronto.CustomerVO;import de.thb.dim.pizzaPronto.DeliveryManVO;import de.thb.dim.pizzaPronto.EmployeeVO;import de.thb.dim.pizzaPronto.PersonVO;/** * The Hierarchy of inheritance is tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 2.010.04.2020 */public class JUnitTestHierarchyOfInheritance {	private static Class<EmployeeVO> myEmployeeClass; 		private static Class<CustomerVO> myCustomerVOClass;			private static  EmployeeVO deliveryMan;			@BeforeAll	public static void initOnce() throws NoSuchFieldException, SecurityException, NoSuchMethodException{			myEmployeeClass = EmployeeVO.class;		myCustomerVOClass = CustomerVO.class;						deliveryMan = new DeliveryManVO();	}	@Test	@DisplayName("test CustomerVO has super class PersonVO")	public void testCustomerVOSuperClassPersonVO() {		assertTrue(myCustomerVOClass.getSuperclass().toString().equals("class de.thb.dim.pizzaPronto.PersonVO"),"CustomerVO is a PersonVO");	}				@Test	@DisplayName("test EmployeeVO has super class PersonVO")	public void testEmployeeSuperClassPersonVO() {		assertTrue(myEmployeeClass.getSuperclass().toString().equals("class de.thb.dim.pizzaPronto.PersonVO"),"EmployeeVO is a PersonVO");	}			@Test	@DisplayName("test ChefVO has super classes PersonVO and EmployeeVO")	public void testChefVOSuperClasses() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		assertTrue( chef instanceof ChefVO, "ChefVO is a ChefVO");		assertTrue( chef instanceof EmployeeVO,"ChefVO is a  EmployeeVO");		assertTrue( chef instanceof PersonVO,"ChefVO is a  PersonVO");	}		@Test	@DisplayName("test ChefVO has attributes inherited and not overwritten")	public void testChefVOAttributesInherited() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		assertEquals(chef.getLastName(),"Bocuse", "Last name is set.");		assertEquals(((EmployeeVO)chef).getLastName(),"Bocuse", "Last name is inherited from EmployeeVO.");		assertEquals(((PersonVO)chef).getLastName(),"Bocuse", "Last name is inherited from PersonVO.");		assertEquals(chef.getFirstName(),"Bruno", "First name is set.");		assertEquals(((EmployeeVO)chef).getFirstName(),"Bruno", "First name is inherited from EmployeeVO.");		assertEquals(((PersonVO)chef).getFirstName(),"Bruno", "First name is inherited from PersonVO.");			}		@Test	@DisplayName("test CustomerVO has attributes inherited and not overwritten")	public void testCustomerVOAttributesInherited() {		CustomerVO 	customer = new CustomerVO("Nachname", "Vorname", LocalDate.of(1990, 5, 31));		assertEquals(customer.getLastName(),"Nachname", "Last name is set.");		assertEquals(((PersonVO)customer).getLastName(),"Nachname", "Last name is inherited from PersonVO.");		assertEquals(customer.getFirstName(),"Vorname", "First name is set.");		assertEquals(((PersonVO)customer).getFirstName(),"Vorname", "First name is inherited from PersonVO.");			}		@Test	@DisplayName("test toString of CustomerVO calls toString of super class")	public void testCustomerVOToString() {		String lastName = "BBB";		String firstName = "AAA";		String street = "road";		int number = 66;		String gender = "?";		int year = 1988;		int month = 6;		int day = 18;		LocalDate dateOfBirth = LocalDate.of(year, month, day);		CustomerVO customer = new CustomerVO(lastName, firstName,street,number, gender, dateOfBirth);				String personString = ((PersonVO)customer).toString();				String actualString = customer.toString();		 	    assertTrue(personString.contains(lastName));	    assertTrue(personString.contains(firstName));	    assertTrue(personString.contains(street));	    assertTrue(personString.contains(String.valueOf(number)));	    assertTrue(actualString.contains(gender));	    assertTrue(actualString.contains(customer.getDateOfBirth().format(DateTimeFormatter.ofPattern("dd MMM yyyy"))));	    assertTrue(actualString.contains(String.valueOf(customer.getId())));	    assertTrue(actualString.contains(String.valueOf(customer.calculateAge())));	    assertFalse(customer.hasOrder());	}		@Test	@DisplayName("test toString of ChefVO calls toString of super class")	public void testChefVOToString() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		assertTrue(chef.toString().contains("Bocuse01"), "ToString contains personnel number.");		assertTrue(chef.toString().contains("Bocuse"), "ToString contains last name.");		assertTrue(chef.toString().contains("Bruno"), "ToString contains first name.");		assertTrue(((EmployeeVO)chef).toString().contains("Bocuse"), "ToString contains last name.");		assertTrue(((EmployeeVO)chef).toString().contains("Bruno"), "ToString contains first name.");	}		@Test	@DisplayName("test ChefVO has the specality - an apron")	public void testChefVOArpon() {		ChefVO chef = new ChefVO("Bocuse01", "Bocuse", "Bruno");		chef.setColorApron(Color.GREEN);		assertEquals(chef.getColorApron(),Color.GREEN, "Color of Apron has setter and getter.");	}		@Test	@DisplayName("test DeliveryManVO has super classes PersonVO and EmployeeVO")	public void testDeliveryManVOSuperClass() {		assertTrue( deliveryMan instanceof DeliveryManVO, "DeliveryManVO is a DeliveryManVO");		assertTrue( deliveryMan instanceof EmployeeVO,"DeliveryManVO is a  EmployeeVO");		assertTrue( deliveryMan instanceof PersonVO,"DeliveryManVO is a  PersonVO");	}		@Test	@DisplayName("test toString of DeliveryManVO calls toString of super classes")	public void testDeliveryManVOToString() {		DeliveryManVO deliveryMan = new DeliveryManVO("Lacy01", "Lacy", "Lutz");		assertEquals(deliveryMan.getPersonnelNo(),"Lacy01", "Personnell number is set.");		assertTrue(deliveryMan.toString().contains("Lacy01"), "ToString contains personnel number.");		assertEquals(deliveryMan.getLastName(),"Lacy", "Last name is set.");		assertEquals(((EmployeeVO)deliveryMan).getLastName(),"Lacy", "Last name is inherited from EmployeeVO.");		assertEquals(((PersonVO)deliveryMan).getLastName(),"Lacy", "Last name is inherited from PersonVO.");		assertTrue(deliveryMan.toString().contains("Lacy"), "ToString contains last name.");		assertEquals(deliveryMan.getFirstName(),"Lutz", "Last name is set.");		assertEquals(((EmployeeVO)deliveryMan).getFirstName(),"Lutz", "First name is inherited from EmployeeVO.");		assertEquals(((PersonVO)deliveryMan).getFirstName(),"Lutz", "First name is inherited from PersonVO.");		assertTrue(deliveryMan.toString().contains("Lutz"), "ToString contains first name.");			}		@Test	@DisplayName("test DeliveryManVO has the specality - a driver licence")	public void testDeliveryManVODriverLicence() {		DeliveryManVO deliveryMan = new DeliveryManVO("Lacy01", "Lacy", "Lutz");		deliveryMan.setDriverLicence("DriverLicence A");		assertEquals(deliveryMan.getDriverLicence(),"DriverLicence A", "Driver licence has setter and getter.");	}		}