package de.thb.dim.pizzaProntoTest;import static org.junit.Assert.fail;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.EmployeeVO;/** * The methods of the class EmployeeVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 4.0 27.02.2020 */public class JUnitTestEmployeeVO {	private static EmployeeVO employeeX, employeeY, employeeZ;	private static Class<EmployeeVO> myEmployeeVOClass;	@BeforeEach	public void initEach() {		employeeX = new EmployeeVO("E1", "Nachname", "Vorname");		employeeY = new EmployeeVO(new String("E1"), new String("Nachname"), new String("Vorname"));		employeeZ = new EmployeeVO(employeeX.getPersonnelNo(), employeeX.getLastName(), employeeX.getFirstName());	}	@Test	@DisplayName("Class has 3 instance attributes")	public void test3Attributes() {		myEmployeeVOClass = EmployeeVO.class;		Field[] attributes = myEmployeeVOClass.getDeclaredFields();		assertEquals(3, attributes.length);	}	@Test	@DisplayName("Information hiding principle and Inheritance: Attributes are protected")	public void testAttributesPrivate() {		myEmployeeVOClass = EmployeeVO.class;		Field[] attributes = myEmployeeVOClass.getDeclaredFields();		int modifiersAttributes;		for (Field f : attributes) {			modifiersAttributes = f.getModifiers();			assertTrue(Modifier.isProtected(modifiersAttributes));		}	}	@Test	@DisplayName("All Methods are public")	public void testMethodsPublic() {		myEmployeeVOClass = EmployeeVO.class;		Method[] methods = myEmployeeVOClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}	@Test	@DisplayName("Default constructor initializes with default values")	public void testDefaultConstructor() {		employeeX = new EmployeeVO();		assertEquals(null, employeeX.getLastName());		assertEquals(null, employeeX.getFirstName());		assertEquals(null, employeeX.getStreet());		assertEquals(0, employeeX.getHouseNumber());	}	@Test	@DisplayName("Initialization constructor with 3 parameters")	public void testIniConstructor3() {		String pNo = "E22";		String lastName = "BBB";		String firstName = "AAA";		employeeX = new EmployeeVO(pNo, lastName, firstName);		assertEquals(pNo, employeeX.getPersonnelNo());		assertEquals(lastName, employeeX.getLastName());		assertEquals(firstName, employeeX.getFirstName());		assertEquals(null, employeeX.getStreet());		assertEquals(0, employeeX.getHouseNumber());	}	// Java default opertions	@Test	@DisplayName("equals is tested with null")	public void equalsNull() {		// For any non-null reference value x, x.equals(null) should return false.		try {			assertFalse(employeeX.equals(null),					"For any non-null reference value x, x.equals(null) should return false.");		} catch (NullPointerException e) {			fail("Cannot invoke equals because one attribute is null. Should not throw a NullPointerException");		}	}	@Test	@DisplayName("equals is tested with 2 objects created by default constructor.")	public void equalsDefaultConstructors() {		EmployeeVO default1, default2;		default1 = new EmployeeVO();		default2 = new EmployeeVO();		try {			default1.equals(default2);		} catch (NullPointerException e) {			fail("Cannot invoke equals because one attribute is null. Should not throw a NullPointerException");		}	}	@Test	@DisplayName("equals is tested with 1 object created by initalizing construct and 1 object created by default construct and.")	public void equalsIniAndDefaultConstructors() {		EmployeeVO ini, default2;		ini = new EmployeeVO("E55", "Nachname", "Vorname");		default2 = new EmployeeVO();		assertFalse(ini.equals(default2));	}	@Test	@DisplayName("equals is tested with two equal/similar objects, i.e different adresses and similar attributes. ")	public void equals2EqualObjects() {		assertFalse(employeeY == employeeX);		assertTrue(employeeX.equals(employeeY));	}	@Test	@DisplayName("equals is tested with  identical objects. ")	public void equals2IdenticalObjects() {		assertTrue(employeeY.equals(employeeY));	}	@Test	@DisplayName("equals is tested with  identical objects, but no street and house number. ")	public void equals2IdenticalObjectsNoColor() {		EmployeeVO employee = new EmployeeVO("123456", "Nachname", "Vorname");		assertTrue(employee.equals(employee));	}	@Test	@DisplayName("equals is tested with other's personnelnumber is null. ")	public void equalsOtherNoPersonnelnumber() {		EmployeeVO employee1 = new EmployeeVO("E2", "Nachname", "Vorname");		EmployeeVO employee2 = new EmployeeVO(null, "Nachname", "Vorname");		assertFalse(employee1.equals(employee2));	}	@Test	@DisplayName("equals is tested with this personnelnumber is null. ")	public void equalsThisNoPersonnelnumber() {		EmployeeVO employee1 = new EmployeeVO(null, "Nachname", "Vorname");		EmployeeVO employee2 = new EmployeeVO("E66", "Nachname", "Vorname");		assertFalse(employee1.equals(employee2));	}	@Test	@DisplayName("equals is tested with three equal objects. Is it reflexive, symmetric and transitive according to the contract ")	public void equals3EqualObjects() {		// It is reflexive: for any non-null reference value x, x.equals(x) should		// return true.		assertTrue(employeeY.equals(employeeY),				"It is reflexive: for any non-null reference value x, x.equals(x) should return true. ");		// It is symmetric: for any non-null reference values x and y, x.equals(y)		// should return true if and only if y.equals(x) returns true.		assertTrue(employeeX.equals(employeeY) == employeeY.equals(employeeX),				"It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ");		// It is transitive: for any non-null reference values x, y, and z, if		// x.equals(y) returns true and y.equals(z) returns true, then x.equals(z)		// should return true.		assertTrue((employeeX.equals(employeeY) && employeeY.equals(employeeZ)) ? employeeX.equals(employeeZ) : false,				"It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. ");	}	@Test	@DisplayName("equals is tested different objects from different classes.")	public void equalsDifferentObjectsDifferentClasses() {		assertFalse(employeeZ.equals(this),				employeeZ.getClass() + " equals is not correct when using objects from differnent class.");	}	@Test	@DisplayName("Simliar objects provide similar hashcode.")	public void hashCodeTest() {		// Simliar objects provide similar hashcode		assertTrue(employeeX.equals(employeeY) == (employeeX.hashCode() == employeeY.hashCode()));	}	@Test	@DisplayName("test toString: Contains all attributes")	public void toStringTest() {		String personnelNo = "CCC";		String lastName = "BBB";		String firstName = "AAA";		EmployeeVO employee = new EmployeeVO(personnelNo, lastName, firstName);		String actualString = employee.toString();		assertTrue(actualString.contains(lastName));		assertTrue(actualString.contains(firstName));		assertTrue(actualString.contains(personnelNo));	}	// Setter/Getter	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter personnelNo")	public void setGetPersonnelNo() {		String personnelNo = "BBB";		employeeX = new EmployeeVO();		employeeX.setPersonnelNo(personnelNo);		assertEquals(personnelNo, employeeX.getPersonnelNo());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter lastname")	public void setGetLastname() {		String lastName = "BBB";		employeeX = new EmployeeVO();		employeeX.setLastName(lastName);		assertEquals(lastName, employeeX.getLastName());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter firstname")	public void setGetFirstName() {		String firstName = "BBB";		employeeX = new EmployeeVO();		employeeX.setFirstName(firstName);		assertEquals(firstName, employeeX.getFirstName());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter street")	public void setGetStreet() {		String street = "BBB";		employeeX = new EmployeeVO();		employeeX.setStreet(street);		assertEquals(street, employeeX.getStreet());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter number")	public void setGetNumber() {		int number = 42;		employeeX = new EmployeeVO();		employeeX.setHouseNumber(number);		assertEquals(number, employeeX.getHouseNumber());	}}