package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertFalse;import static org.junit.jupiter.api.Assertions.assertTrue;import static org.junit.jupiter.api.Assertions.fail;import java.awt.Color;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.ChefVO;import de.thb.dim.pizzaPronto.PizzaVO;/** * The methods of the class ChefVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 4.0 27.02.2020 */public class JUnitTestChefVO {	private static ChefVO chefX, chefY, chefZ;	private static Class<ChefVO> myChefVOClass;	@BeforeEach	public void initEach() {		chefX = new ChefVO("Nachname", "Vorname", Color.WHITE);		chefY = new ChefVO(chefX.getLastName(), chefX.getFirstName(), chefX.getColorApron());		chefZ = new ChefVO(chefX.getLastName(), chefX.getFirstName(), chefX.getColorApron());	}	@Test	@DisplayName("Class has 3 instance attributes")	public void test3Attributes() {		myChefVOClass = ChefVO.class;		Field[] attributes = myChefVOClass.getDeclaredFields();		assertEquals(3, attributes.length);	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Attributes are private")	public void testAttributesPrivate() {		myChefVOClass = ChefVO.class;		Field[] attributes = myChefVOClass.getDeclaredFields();		int modifiersAttributes;		for (Field f : attributes) {			modifiersAttributes = f.getModifiers();			assertTrue(Modifier.isPrivate(modifiersAttributes));		}	}	@Test	@DisplayName("All Methods are public")	public void testMethodsPublic() {		myChefVOClass = ChefVO.class;		Method[] methods = myChefVOClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}	@Test	@DisplayName("Default constructor initializes with default values")	public void testDefaultConstructor() {		chefX = new ChefVO();		assertEquals(null, chefX.getLastName());		assertEquals(null, chefX.getFirstName());		assertEquals(null, chefX.getColorApron());	}	@Test	@DisplayName("Initialization constructor with 3 parameters")	public void testIniConstructor() {		String lastName = "BBB";		String firstName = "AAA";		Color apron = Color.MAGENTA;		chefX = new ChefVO(lastName, firstName, apron);		assertEquals(lastName, chefX.getLastName());		assertEquals(firstName, chefX.getFirstName());		assertEquals(apron, chefX.getColorApron());	}	// Java default operations	@Test	@DisplayName("equals is tested with null")	public void equalsNull() {		// For any non-null reference value x, x.equals(null) should return false.		assertFalse(chefX.equals(null), "For any non-null reference value x, x.equals(null) should return false.");	}	@Test	@DisplayName("equals is tested with 2 objects created by default constructor.")	public void equalsDefaultConstructors() {		ChefVO default1, default2;		default1 = new ChefVO();		default2 = new ChefVO();		try {			assertTrue(default1.equals(default2));		} catch (NullPointerException e) {			fail("Cannot invoke equals because one attribute is null. Should not throw a NullPointerException");		}	}	@Test	@DisplayName("equals is tested with 1 object created by initalizing construct and 1 object created by default construct and.")	public void equalsIniAndDefaultConstructors() {		ChefVO ini, default2;		ini = new ChefVO("Nachname", "Vorname", Color.WHITE);		default2 = new ChefVO();		assertFalse(ini.equals(default2));	}	@Test	@DisplayName("equals is tested with two equal/similar objects, i.e different adresses and similar attributes. ")	public void equals2EqualObjects() {		assertFalse(chefY == chefX);		assertTrue(chefX.equals(chefY));	}	@Test	@DisplayName("equals is tested with  identical objects. ")	public void equals2IdenticalObjects() {		assertTrue(chefY.equals(chefY));	}	@Test	@DisplayName("equals is tested with three equal objects. Is it reflexive, symmetric and transitive according to the contract ")	public void equals3EqualObjects() {		// It is reflexive: for any non-null reference value x, x.equals(x) should		// return true.		assertTrue(chefY.equals(chefY),				"It is reflexive: for any non-null reference value x, x.equals(x) should return true. ");		// It is symmetric: for any non-null reference values x and y, x.equals(y)		// should return true if and only if y.equals(x) returns true.		assertTrue(chefX.equals(chefY) == chefY.equals(chefX),				"It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ");		// It is transitive: for any non-null reference values x, y, and z, if		// x.equals(y) returns true and y.equals(z) returns true, then x.equals(z)		// should return true.		assertTrue((chefX.equals(chefY) && chefY.equals(chefZ)) ? chefX.equals(chefZ) : false,				"It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. ");	}	@Test	@DisplayName("equals is tested different objects.")	public void equalsDifferentObjects() {		chefZ.setLastName("Anders");		assertFalse(chefZ.equals(chefX),				chefZ.getClass() + " equals is correct when using diffenrent objects of the same class");	}	@Test	@DisplayName("equals is tested with  identical objects, but no color of apron. ")	public void equals2IdenticalObjectsNoColor() {		ChefVO chef = new ChefVO("Nachname", "Vorname", null);		assertTrue(chef.equals(chef));	}	@Test	@DisplayName("equals is tested with other's lastname is null. ")	public void equalsOtherNoLastname() {		ChefVO chef1 = new ChefVO("Nachname", "Vorname", Color.CYAN);		ChefVO chef2 = new ChefVO(null, "Vorname", Color.CYAN);		assertFalse(chef1.equals(chef2));	}	@Test	@DisplayName("equals is tested with this lastname is null. ")	public void equalsThisNoLastname() {		ChefVO chef1 = new ChefVO(null, "Vorname", Color.CYAN);		ChefVO chef2 = new ChefVO("Nachname", "Vorname", Color.CYAN);		try {			assertFalse(chef1.equals(chef2));		} catch (NullPointerException e) {			fail("equals is tested with this lastname  is null and other not. Should not throw a NullPointerException");		}	}	@Test	@DisplayName("equals is tested with other's firstname is null. ")	public void equalsOtherNoFirstname() {		ChefVO chef1 = new ChefVO("Nachname", "Vorname", Color.CYAN);		ChefVO chef2 = new ChefVO("Nachname", null, Color.CYAN);		assertFalse(chef1.equals(chef2));	}	@Test	@DisplayName("equals is tested with this firstname  is null. ")	public void equalsThisNoFirstname() {		ChefVO chef1 = new ChefVO("Nachname", null, Color.CYAN);		ChefVO chef2 = new ChefVO("Nachname", "Vorname", Color.CYAN);		try {			assertFalse(chef1.equals(chef2));		} catch (NullPointerException e) {			fail("equals is tested with this firstname  is null and other not. Should not throw a NullPointerException");		}	}	@Test	@DisplayName("equals is tested with other's color of apron is null. ")	public void equalsOtherNoColor() {		ChefVO chef1 = new ChefVO("Nachname", "Vorname", Color.CYAN);		ChefVO chef2 = new ChefVO("Nachname", "Vorname", null);		assertFalse(chef1.equals(chef2));	}	@Test	@DisplayName("equals is tested with this color of apron is null. ")	public void equalsThisNoColor() {		ChefVO chef1 = new ChefVO("Nachname", "Vorname", null);		ChefVO chef2 = new ChefVO("Nachname", "Vorname", Color.CYAN);		try {			assertFalse(chef1.equals(chef2));		} catch (NullPointerException e) {			fail("equals is tested with this color of apron is null and other not. Should not throw a NullPointerException");		}	}	@Test	@DisplayName("equals is tested different objects from different classes.")	public void equalsDifferentObjectsDifferentClasses() {		assertFalse(chefZ.equals(new PizzaVO()),				chefZ.getClass() + " equals is not correct when using objects from differnent class.");	}	@Test	@DisplayName("Simliar objects provide similar hashcode.")	public void hashCodeTest() {		// Simliar objects provide similar hashcode		assertTrue(chefX.equals(chefY) == (chefX.hashCode() == chefY.hashCode()));	}	@Test	@DisplayName("Test toString: Contains all attributes")	public void toStringTest() {		String lastName = "BBB";		String firstName = "AAA";		ChefVO chef = new ChefVO(lastName, firstName, Color.WHITE);		String actualString = chef.toString();		assertTrue(actualString.contains(lastName));		assertTrue(actualString.contains(firstName));	}	// Setter/Getter	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter lastname")	public void setGetLastname() {		String lastName = "BBB";		chefX = new ChefVO();		chefX.setLastName(lastName);		assertEquals(lastName, chefX.getLastName());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter firstname")	public void setGetFirstName() {		String firstName = "BBB";		chefX = new ChefVO();		chefX.setFirstName(firstName);		assertEquals(firstName, chefX.getFirstName());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter color of apron")	public void setGetColorApron() {		Color apron = Color.BLUE;		chefX = new ChefVO();		chefX.setColorApron(apron);		assertEquals(apron, chefX.getColorApron());	}}