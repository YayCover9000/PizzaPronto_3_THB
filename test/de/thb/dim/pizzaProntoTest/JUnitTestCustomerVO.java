package de.thb.dim.pizzaProntoTest;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.lang.reflect.Modifier;import java.time.DateTimeException;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import de.thb.dim.pizzaPronto.CustomerVO;/** * The methods of the class CustomerVO are tested. *  * Special assert statements are used for testing <br> *  * @author Gabriele Schmidt * @version 4.0 27.02.2020 */public class JUnitTestCustomerVO {	private static CustomerVO customerX;	private static Class<CustomerVO> myCustomerVOClass;	@BeforeEach	public void initEach() {	}	@Test	@DisplayName("Class has 4 instance attributes")	public void test3Attributes() {		myCustomerVOClass = CustomerVO.class;		Field[] attributes = myCustomerVOClass.getDeclaredFields();		assertEquals(4, attributes.length);	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Attributes are private")	public void testAttributesPrivate() {		myCustomerVOClass = CustomerVO.class;		Field[] attributes = myCustomerVOClass.getDeclaredFields();		int modifiersAttributes;		for (Field f : attributes) {			modifiersAttributes = f.getModifiers();			assertTrue(Modifier.isPrivate(modifiersAttributes));		}	}	@Test	@DisplayName("All Methods are public")	public void testMethodsPublic() {		myCustomerVOClass = CustomerVO.class;		Method[] methods = myCustomerVOClass.getDeclaredMethods();		int modifiersMethods;		for (Method m : methods) {			modifiersMethods = m.getModifiers();			assertTrue(Modifier.isPublic(modifiersMethods));		}	}	@Test	@DisplayName("Default constructor initializes with default values")	public void testDefaultConstructor() {		customerX = new CustomerVO();		assertEquals(null, customerX.getLastName());		assertEquals(null, customerX.getFirstName());		assertEquals(null, customerX.getDateOfBirth());		assertEquals(null, customerX.getGender());	}	@Test	@DisplayName("Initialization constructor with 3 parameters")	public void testIniConstructor3Param() {		String lastName = "BBB";		String fistName = "AAA";		LocalDate dateOfBirth = LocalDate.of(2000, 3, 15);		customerX = new CustomerVO(lastName, fistName, dateOfBirth);		assertEquals(lastName, customerX.getLastName());		assertEquals(fistName, customerX.getFirstName());		assertEquals(dateOfBirth, customerX.getDateOfBirth());	}	@Test	@DisplayName("Initialization constructor with 4 parameters")	public void testIniConstructor4Param() {		String lastName = "BBB";		String fistName = "AAA";		String gender = "?";		LocalDate dateOfBirth = LocalDate.of(1988, 6, 18);		customerX = new CustomerVO(lastName, fistName, gender, dateOfBirth);		assertEquals(lastName, customerX.getLastName());		assertEquals(fistName, customerX.getFirstName());		assertEquals(gender, customerX.getGender());		assertEquals(dateOfBirth, customerX.getDateOfBirth());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter lastname")	public void setGetLastname() {		String lastName = "BBB";		customerX = new CustomerVO();		customerX.setLastName(lastName);		assertEquals(lastName, customerX.getLastName());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter firstname")	public void setGetFirstName() {		String firstName = "BBB";		customerX = new CustomerVO();		customerX.setFirstName(firstName);		assertEquals(firstName, customerX.getFirstName());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter gender")	public void setGetGender() {		String gender = "unknown";		customerX = new CustomerVO();		customerX.setGender(gender);		;		assertEquals(gender, customerX.getGender());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter/getter date of birth")	public void setGetDateOfBirth() {		LocalDate dateOfBirth = LocalDate.of(2024, 12, 24);		customerX = new CustomerVO();		customerX.setDateOfBirth(dateOfBirth);		assertEquals(dateOfBirth, customerX.getDateOfBirth());	}	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter test: Class LocalDate throws DateTimeException for 30.2.1967")	public void setDateOfBirthWithException() {		customerX = new CustomerVO();		Assertions.assertThrows(DateTimeException.class, () -> customerX.setDateOfBirth(LocalDate.of(1967, 2, 30)));	}	// set date null	@Test	@DisplayName("Information hiding principle (Geheimnisprinzip): Setter test: Class LocalDate accepts null")	public void setDateOfBirthNull() {		customerX.setDateOfBirth(null);	}	@Test	@DisplayName("Test dobToString: Returns a String which is formatted according to \"dd MMM yyyy\" ")	public void dobToStringTest() {		LocalDate dateOfBirth = LocalDate.of(2024, 12, 24);		customerX = new CustomerVO();		customerX.setDateOfBirth(dateOfBirth);		assertEquals(customerX.getDateOfBirth().format(DateTimeFormatter.ofPattern("dd MMM yyyy")),				customerX.dobToString());	}}